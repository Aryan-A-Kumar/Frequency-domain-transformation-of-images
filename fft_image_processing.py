# -*- coding: utf-8 -*-
"""Exp-03-21EC39008.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kc6Y4lz_SBBHUu_6Y83g_90AFOpy415o
"""

import numpy as np
import matplotlib.pyplot as plt
from PIL import Image

def compute_fft(image):
    """
    Compute the Fast Fourier Transform (FFT) of an image.

    Parameters:
    image (ndarray): 2D array representing the grayscale image.

    Returns:
    fft_result (ndarray): 2D array of the FFT result.
    magnitude_spectrum (ndarray): 2D array representing the magnitude spectrum.
    phase_spectrum (ndarray): 2D array representing the phase spectrum.
    """
    fft_result = np.fft.fft2(image)
    magnitude_spectrum = np.abs(fft_result)
    phase_spectrum = np.angle(fft_result)

    return fft_result, magnitude_spectrum, phase_spectrum

def compute_ifft(fft_data):
    """
    Compute the Inverse Fast Fourier Transform (iFFT) of an image.

    Parameters:
    fft_data (ndarray): 2D array representing the FFT of the image.

    Returns:
    ifft_result (ndarray): 2D array of the iFFT result.
    """
    ifft_result = np.fft.ifft2(fft_data)

    return ifft_result

def visualize_spectrum(magnitude_spectrum, phase_spectrum):
    """
    Visualize the magnitude and phase spectrum of an image.

    Parameters:
    magnitude_spectrum (ndarray): 2D array of the magnitude spectrum.
    phase_spectrum (ndarray): 2D array of the phase spectrum.
    """
    plt.figure(figsize=(12, 6))

    # Plot Magnitude Spectrum
    plt.subplot(1, 2, 1)
    plt.imshow(np.log(1 + magnitude_spectrum), cmap='gray')
    plt.title('Magnitude Spectrum')
    plt.colorbar()

    # Plot Phase Spectrum
    plt.subplot(1, 2, 2)
    plt.imshow(phase_spectrum, cmap='gray')
    plt.title('Phase Spectrum')
    plt.colorbar()

    plt.show()



def load_image(image_path):
    """
    Load an image and convert it to grayscale.

    Parameters:
    image_path (str): Path to the image file.

    Returns:
    image (ndarray): 2D array representing the grayscale image.
    """
    image = Image.open(image_path).convert('L')
    return np.array(image)

def multiply_image_by_negative_power(image):
    """
    Multiply the image by (-1)^(x+y).

    Parameters:
    image (ndarray): 2D array representing the grayscale image.

    Returns:
    modified_image (ndarray): 2D array of the modified image.
    """
    rows, cols = image.shape
    x, y = np.meshgrid(np.arange(cols), np.arange(rows))
    multiplier = (-1) ** (x + y)
    modified_image = image * multiplier
    return modified_image

def process_image(image_path):
    """
    Process the image by applying specified operations:
    1. Multiply the image by (-1)^(x+y)
    2. Compute FFT of the modified image
    3. Compute Complex Conjugate of FFT result
    4. Compute iFFT of the Complex Conjugate
    5. Multiply the real part of iFFT result by (-1)^(x+y)

    Parameters:
    image_path (str): Path to the image file.
    """
    # Step 1: Load and multiply image
    image = load_image(image_path)
    modified_image = multiply_image_by_negative_power(image)

    # Step 2: Compute FFT
    fft_result, _, _ = compute_fft(modified_image)

    # Step 3: Compute Complex Conjugate
    complex_conjugate_fft = np.conj(fft_result)

    # Step 4: Compute iFFT
    ifft_result = compute_ifft(complex_conjugate_fft)

    # Step 5: Multiply the real part by (-1)^(x+y)
    real_part = np.real(ifft_result)
    final_result = multiply_image_by_negative_power(real_part)

    # Visualize the resultant image
    plt.imshow(final_result, cmap='gray')
    plt.title('Resultant Image after Processing')
    plt.colorbar()
    plt.show()

# Example usage with a random image for visualizing the spectra
# Assuming 'random_image' is a 2D numpy array representing the image
# Uncomment the next three lines to
# random_image = load_image('dip.tif')
# fft_result, magnitude_spectrum, phase_spectrum = compute_fft(random_image)
# visualize_spectrum(magnitude_spectrum, phase_spectrum)

# Run the processing function with 'dip.tif'
# Uncomment the next line to run
# process_image('dp.tif')